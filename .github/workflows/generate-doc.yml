name: Auto Document Workflows

on:
  workflow_dispatch:
  
  push:
    paths:
      - ".github/workflows/*.yml"
      - ".github/workflows/*.yaml"
      - "!.github/workflows/generate-doc.yml"

jobs:
  autodoc:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        name: Install Node 22
        with:
          node-version: 22

      - name: Install Copilot CLI
        run: npm install -g @github/copilot@latest

      - name: Get changed YML files
        id: changed
        run: |
          echo "Get YML files changed:"
          git fetch origin ${{ github.event.before }}
          files=$(git diff --name-only ${{ github.event.before }} ${{ github.sha }} | grep ".github/workflows/.*\.yml" || true)
          echo "changed_files=$files" >> $GITHUB_OUTPUT

      - name: Generating Documentation
        if: steps.changed.outputs.changed_files != ''
        run: |
          echo "Create docs folder to explain workflows."
          mkdir -p docs/workflows
          for f in ${{ steps.changed.outputs.changed_files }}; do
            outFile="docs/workflows/$(basename $f .yml).md"
            echo "ðŸ“„ Processing $f"
            echo "ðŸ“„ Generating doc on $outFile"
            copilot -p "Use only the content received via stdin. Ignore any other files in the workspace. Please explain in detail this workflow and describe stages, jobs and steps on markdown format. Create a mermaid that represent this workflow." < $f > $outFile
            echo "âœ… File generated $outFile"
          done
        env:
          GH_TOKEN: ${{ secrets.COPILOT_CLI }}

      - name: Commit & Push Docs
        if: steps.changed.outputs.changed_files != ''
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add docs/workflows
          git commit -m "docs: Refresh workflow documentation"
          git push
          
#      - name: Generating documentaion
#        if: steps.changed.outputs.changed_files != ''
#        run: |
#          for f in ${{ steps.changed.outputs.changed_files }}; do
#            echo "ðŸ“„ Processing $f"
#            @$f "Please explain in detail this workflow and describe stages, jobs and steps on markdown format. Create a mermaid that represent this workflow."
#          done

